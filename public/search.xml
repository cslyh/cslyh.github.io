<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>tmux设置</title>
    <url>/posts/2385916753.html</url>
    <content><![CDATA[<h1 id="tmux设置"><a href="#tmux设置" class="headerlink" title="tmux设置"></a>tmux设置</h1><p>tmux是一个终端复用器，可以同时开启多个终端，这里修改一下设置，将响应按键ctrl+b修改为ctrl+a，同时开启鼠标功能。</p>
<p>安装后需要修改~&#x2F;.tmux.conf配置文件，添加一下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set -g prefix C-a </span><br><span class="line">unbind C-b # C-b即Ctrl+b键，unbind意味着解除绑定</span><br><span class="line">bind C-a send-prefix # 绑定Ctrl+a为新的指令前缀</span><br><span class="line">set-option -g mouse on</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>tmux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的博客！！</title>
    <url>/posts/4268595940.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>动态规划问题分类整理</title>
    <url>/posts/905387906.html</url>
    <content><![CDATA[<h1 id="分析模板"><a href="#分析模板" class="headerlink" title="分析模板"></a>分析模板</h1><p>动态规划算是最难的一类了，没有固定的模板，但有其思想，闫式DP分析法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cslyh/picgostore@main/img/image-20230904231847468.png" alt="image-20230904231847468"></p>
<p>状态表示是一个数代表<strong>一个集合</strong>，并且有<strong>一个具体属性</strong>，优化搜索</p>
<p>状态计算依据一般是寻找<strong>最后一个不同点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先得出状态表示(一个表达式)，一维/二维/...，这个需要一定经验</span><br><span class="line">集合：状态表示哪个集合</span><br><span class="line">属性：状态表示这个集合具体什么值，最小/最大/和</span><br><span class="line"></span><br><span class="line">然后进行状态计算</span><br><span class="line">集合划分:根据最后一步xxx划分,各个子集分别对应哪个状态(不一定一一对应，一个状态可能包含或者小于某个子集，视问题而定)</span><br><span class="line">状态转移:转移方程是这些状态取最小/最大/求和</span><br><span class="line"></span><br><span class="line">最后按流程求解</span><br><span class="line">初始化:需要设定什么初始值</span><br><span class="line">转移过程:如何编写代码对应状态转移</span><br><span class="line">答案:最终答案是哪个状态或者怎么得到</span><br></pre></td></tr></table></figure>

<p>下面以各类题目为例</p>
<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><p>背包问题是经典的问题了，有很多种解法，最经典的还是动态规划</p>
<h2 id="1-01背包问题"><a href="#1-01背包问题" class="headerlink" title="1.01背包问题"></a>1.01背包问题</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/2/">2. 01背包问题 - AcWing题库</a></p>
<p>有 N 件物品和一个容量是 V的背包。每件物品只能使用一次。第 i件物品的体积是 vi，价值是 wi。</p>
<p>求出最大价值</p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态表示:dp(i,j)</span><br><span class="line">集合:前i件物品，体积不超过j的背包物品的选择方式</span><br><span class="line">属性:最大价值</span><br><span class="line"></span><br><span class="line">状态计算</span><br><span class="line">状态划分:</span><br><span class="line">根据第i件物品选与不选划分</span><br><span class="line">选第i件物品,可由前i-1件物品递推得到,dp(i-1,j-v[i])+w[i]</span><br><span class="line">不选第i件物品，就是前i-1件物品,dp(i-1,j)</span><br><span class="line">状态转移:</span><br><span class="line">两者取最小值</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/cslyh/picgostore@main/img/image-20230905190735910.png" alt="image-20230905190735910"></p>
<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>  SIZE = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];  <span class="comment">//SIZE设大点方便，dp二维数组初始化为0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,V;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="type">int</span>* v = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="type">int</span>* w = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=V;j++)&#123;</span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=v[i])dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[N][V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>01背包的优化—使用滚动数组</strong></p>
<p><strong>思路分析</strong></p>
<p>朴素的01背包使用了两维数组，但实际上根据递推公式，只是第i层和第i-1层不断迭代，那么我们可以使用滚动数组，更新前的旧数组为第i-1层，当前更新的为第i层，利用这个差完成优化。</p>
<blockquote>
<p>有一个无脑的降维技巧就是直接先删去第一维再考虑要不要改</p>
</blockquote>
<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,V;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="type">int</span>* v = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="type">int</span>* w = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=V;j&gt;=v[i];j--)&#123;  <span class="comment">//这里j从大到小，是为了保证j-v[i]还没有更新也就是属于i-1层,以后直接一步到位</span></span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-完全背包问题"><a href="#2-完全背包问题" class="headerlink" title="2.完全背包问题"></a>2.完全背包问题</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/3/">3. 完全背包问题 - AcWing题库</a></p>
<p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。</p>
<p>第 i 种物品的体积是 vi，价值是 wi。</p>
<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p>
</blockquote>
<p><strong>思路分析</strong></p>
<p>和01背包的区别是每件物品无限件可用，区别在于集合划分。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cslyh/picgostore@main/img/image-20230905204904193.png" alt="image-20230905204904193"></p>
<p>得出递推公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][j]=max(dp[i-1][j],dp[i-1][j-v[i]]+w[i],dp[i-1][j-2*v[i]]+2*w[i],…,dp[i-1][j-k*v[i]]+k*w[i])</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,V;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="type">int</span>* v = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="type">int</span>* w = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=V;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=j/v[i];k++)&#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i<span class="number">-1</span>][j-k*v[i]]+k*w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[N][V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>完全背包的优化-基于递推关系</strong></p>
<p>朴素的完全背包似乎需要枚举每种的所有可能性，但是，真的如此吗，会不会有重复</p>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以dp[i][j]和dp[i][j-v[i]]为例,尝试找出关系</span><br><span class="line">dp[i][j]=max(dp[i-1][j],dp[i-1][j-v[i]]+w[i],dp[i-1][j-2*v[i]]+2*w[i],...,dp[i-1][j-k*v[i]]+k*w[i])</span><br><span class="line">dp[i][j-v[i]]=max(      dp[i-1][j-v[i]],     d[i-1][j-2*v[i]]+w[i],...,   dp[i-1][j-k*v[i]+(k-1)*w[i])</span><br><span class="line">可以看出dp[i][j]相比于dp[i][j-v[i]]，后面多了w[i]</span><br><span class="line">因此简化成dp[i][j]=max(dp[i-1][j],dp[i][j-v[i]]+w[i])</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,V;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="type">int</span>* v = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="type">int</span>* w = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=V;j++)&#123;</span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=v[i])dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i][j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[N][V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进一步，可以使用滚动数组降成一维</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,V;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="type">int</span>* v = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="type">int</span>* w = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=v[i];j&lt;=V;j++)&#123;  <span class="comment">//这里j从小到大，是因为dp[j-v[i]]是在第i层，与01背包也只有这里不同</span></span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v[i]]+w[i]);  <span class="comment">//记忆的话就是说完全背包能不能多要一件使得价值更大</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-多重背包问题"><a href="#3-多重背包问题" class="headerlink" title="3.多重背包问题"></a>3.多重背包问题</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/4/">4. 多重背包问题 I - AcWing题库</a></p>
<p>有 N 种物品和一个容量是 V 的背包。</p>
<p>第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。</p>
<p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p>
</blockquote>
<p><strong>思路分析</strong></p>
<p>和完全背包的区别只在于每件物品有限，首先正常思路仍然可以找出递推关系</p>
<p><img src="https://cdn.jsdelivr.net/gh/cslyh/picgostore@main/img/image-20230906190034588.png" alt="image-20230906190034588"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">递推关系式为：</span><br><span class="line">dp[i][j]=max(dp[i-1][j],dp[i-1][j-v[i]]+w[i],dp[i-1][j-2*v[i]]+2*w[i],...,dp[i-1][j-s*v[i]]+s*w[i])</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,V;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="type">int</span>* v = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="type">int</span>* w = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="type">int</span>* s = <span class="keyword">new</span> <span class="type">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=V;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=s[i]&amp;&amp;k&lt;=j/v[i];k++)&#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i<span class="number">-1</span>][j-k*v[i]]+k*w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[N][V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多重背包的优化-基于二进制</strong></p>
<p><strong>思路分析</strong></p>
<p>首先可以发现，各个物品的数量不相同，单纯递推关系不能再优化，但可以使用二进制进行优化。</p>
<p>对于任意一个整数k,0&lt;&#x3D;k&lt;&#x3D;s，可以表示成k&#x3D;0+1+2+4+…+a，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">证明：对于s，0+1+2+4+8+...+2^i+2^j+...</span><br><span class="line">显然s必然属于某个左闭右开集合，比如[2^i,2^j)</span><br><span class="line">s = 0+1+2+4+8+...+2^i+a;</span><br><span class="line">从而我们不必列举0~s所有可能性，而只需要列举0,1,2,...,a，复杂度降到logs</span><br><span class="line">实际上我们将一件数量为s的物品转换成若干个数量为1物品，它们的体积和价值是原来相应的倍数，这样实际变成了01背包问题，下面给出代码，直接上一维了。</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;      </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE=<span class="number">14000</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,V;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="type">int</span>* v = <span class="keyword">new</span> <span class="type">int</span>[N*<span class="number">14</span>];</span><br><span class="line">    <span class="type">int</span>* w = <span class="keyword">new</span> <span class="type">int</span>[N*<span class="number">14</span>];</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a,b,s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;  <span class="comment">//初始化v和w</span></span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=s;k*=<span class="number">2</span>)&#123;</span><br><span class="line">            index++;</span><br><span class="line">            v[index] = a*k;</span><br><span class="line">            w[index] = b*k;</span><br><span class="line">            s-=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            index++;</span><br><span class="line">            v[index] = a*s;</span><br><span class="line">            w[index] = b*s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=index;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=V;j&gt;=v[i];j--)&#123;</span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-分组背包问题"><a href="#4-分组背包问题" class="headerlink" title="4.分组背包问题"></a>4.分组背包问题</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/9/">9. 分组背包问题 - AcWing题库</a></p>
<p>有 N组物品和一个容量是 V 的背包。</p>
<p>每组物品有若干个，同一组内的物品最多只能选一个。<br>每件物品的体积是 vij，价值是 wij，其中 i 是组号，j 是组内编号。</p>
<p>求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p>
<p>输出最大价值。</p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于dp[i][j]，表示前i组体积不超过j的所有选法中的最大价值</span><br><span class="line">dp[i][j] = max(dp[i-1][j],dp[i-1][j-v[i][1]]+w[i][1],...,dp[i-1][j-v[i][s]]+w[i][s])</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">120</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE];</span><br><span class="line"><span class="type">int</span> v[SIZE][SIZE];</span><br><span class="line"><span class="type">int</span> w[SIZE][SIZE];</span><br><span class="line"><span class="type">int</span> s[SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,V;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=s[i];j++)&#123;</span><br><span class="line">            cin&gt;&gt;v[i][j]&gt;&gt;w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=V;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=s[i];k++)&#123;  <span class="comment">//注意这里j和k的顺序不能变，每次列举的k对应j-v[i]层</span></span><br><span class="line">                <span class="keyword">if</span>(j&gt;=v[i][k])dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v[i][k]]+w[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h1><p>所谓线性dp，就是指状态之间有线性关系的动态规划问题。</p>
<h2 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/900/">898. 数字三角形 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<p>从动态规划角度考虑</p>
<p>首先定义状态，根据三角形数据状况定义dp(i,j)，i表示行数，j表示列数(注意对应关系)</p>
<p>集合：从起点出发到（i，j）位置处的所有走法</p>
<p>属性：所有走法中数字之和的最大值</p>
<table>
<thead>
<tr>
<th></th>
<th>j&#x3D;1</th>
<th>j&#x3D;2</th>
<th>j&#x3D;3</th>
<th>j&#x3D;4</th>
<th>j&#x3D;5</th>
</tr>
</thead>
<tbody><tr>
<td>i&#x3D;1</td>
<td>7</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>i&#x3D;2</td>
<td>3</td>
<td>8</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>i&#x3D;3</td>
<td>8</td>
<td>1</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>i&#x3D;4</td>
<td>2</td>
<td>7</td>
<td>4</td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>i&#x3D;5</td>
<td>4</td>
<td>5</td>
<td>2</td>
<td>6</td>
<td>5</td>
</tr>
</tbody></table>
<p>然后，找出状态转移方程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于(i,j)位置，它可由(i-1,j-1)和(i-1,j)位置转移而来</span><br><span class="line">也就是dp[i][j]=max(dp[i-1][j-1],dp[i-1][j])+arr[i][j]</span><br><span class="line">当然要注意边界情况</span><br></pre></td></tr></table></figure>

<p>最后，注意遍历方式</p>
<p>显然i，j都从小到大遍历即可</p>
<p><strong>代码实现</strong></p>
<p>优化成一维就不说了，能过的话也没必要</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];</span><br><span class="line"><span class="type">int</span> num[SIZE][SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            cin&gt;&gt;num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">1</span>)dp[i][j]=dp[i<span class="number">-1</span>][j]+num[i][j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==i)dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+num[i][j];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j])+num[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxPathNum=dp[n][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        maxPathNum=<span class="built_in">max</span>(maxPathNum,dp[n][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;maxPathNum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自底向上的优化</strong></p>
<p>一般数字三角形是从上往下进行递推的，然而这样需要判断边界条件并且答案还需要遍历最后一行，实际上我们可以从下向上进行递推，最终规约到第一行一个数，直接输出，方便很多，当然复杂度还是一样。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];</span><br><span class="line"><span class="type">int</span> num[SIZE][];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            cin&gt;&gt;num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>])+num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/897/">895. 最长上升子序列 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<p>首先定义状态dp(i)，表示以i结尾的严格递增的子序列(集合)的最长值(属性)、</p>
<p>然后进行状态计算，dp(i)和前面dp(1),dp(2),…,dp(i-1)都有关，也就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i]=max(dp[1]+num[i]&gt;num[1],dp[2]+num[i]&gt;num[2]+...+dp[i-1]+num[i]&gt;num[i-1])</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE];</span><br><span class="line"><span class="type">int</span> num[SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        dp[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i]&gt;num[j])dp[i]=<span class="built_in">max</span>(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = dp[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        ret = <span class="built_in">max</span>(ret,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ret;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优化</strong></p>
<blockquote>
<p><a href="https://www.acwing.com/problem/content/898/">896. 最长上升子序列 II - AcWing题库</a></p>
</blockquote>
<p>朴素的动态规划需要遍历当前位置之前的每个元素，然而实际上并不需要，可以进行优化。</p>
<p>我们原来dp数组存储的是以i结尾的上升子序列的最大长度，也就是我们可能存储了重复的长度，实际上每种长度只需存一个它的最小结尾。</p>
<p>比如当前来到i位置，对于1,2,…,i-1位置，上升子序列长度最大为i-1，用dp[1,2,3,…i-1]存储每种长度的最小结尾数，因为如果i位置能够接在最小结尾数后面，那也一定能接在更大结尾数后面，比如对于num[i]，它应该替换小于它的最大结尾数后一位(使用二分)，比如下标k，使得dp[k+1]变成更小的num[i]，从而完成状态转移，最终dp的长度就是答案。</p>
<p>总之就是相比key为下标，值为长度，key为长度，值为下标可以使用二分优化到logn</p>
<img src="https://cdn.jsdelivr.net/gh/cslyh/picgostore@main/img/image-20231008164337579.png" alt="image-20231008164337579" style="zoom:50%;" />



<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> dp[SIZE];</span><br><span class="line"><span class="type">int</span> num[SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span> base,<span class="type">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=length;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(dp[mid]&lt;base)l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">-2e9</span>;  <span class="comment">//为了确保能二分，增设dp[0]</span></span><br><span class="line">    <span class="type">int</span> length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">binarySearch</span>(num[i],length)+<span class="number">1</span>;</span><br><span class="line">        dp[index]=num[i];</span><br><span class="line">        length=<span class="built_in">max</span>(length,index);</span><br><span class="line">    &#125;</span><br><span class="line">  	cout&lt;&lt;length;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/899/">897. 最长公共子序列 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态表示:定义状态dp(i,j)，集合表示A的前i个字符和B的前j个字符的子序列，属性是长度最长值</span><br><span class="line">状态计算:dp(i,j)</span><br><span class="line">根据最后一个字符是否在子序列中分为四类</span><br><span class="line">情况1:第i个字符不在,第j个字符不在,此时为dp(i-1,j-1)</span><br><span class="line">情况2:第i个字符不在,第j个字符在,此时为dp(i-1,j)</span><br><span class="line">情况3:第i个字符在,第j个字符不在,此时为dp(i,j-1)</span><br><span class="line">情况4:第i个字符在,第j个字符在,此时为dp(i-1,j-1)+1  注意条件需要满足str[i]==str[j]</span><br><span class="line"></span><br><span class="line">初步想法如上，但是仔细思考会发现dp(i-1,j)和dp(i,j-1)超出对应情况</span><br><span class="line">dp(i-1,j)只是表示B前j个字符在子序列中，第j个在不在不确定，因此包括情况1和情况2</span><br><span class="line">同样dp(i,j-1)包括情况1和情况3</span><br><span class="line"></span><br><span class="line">但是由于我们求的是最长公共子序列，因此重复并不影响，最终我们只选取dp(i-1,j),dp(i,j-1),dp(i-1,j-1)+1即可覆盖所有情况</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1010</span>;</span><br><span class="line"><span class="type">char</span> A[SIZE];</span><br><span class="line"><span class="type">char</span> B[SIZE];</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,M;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    cin&gt;&gt;A+<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;B+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;j++)&#123;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(A[i]==B[j])dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[N][M];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最短编辑距离"><a href="#最短编辑距离" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/904/">902. 最短编辑距离 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态表示:dp(i,j)</span><br><span class="line">集合:将A的前i个字符变成B的前j个字符的操作数</span><br><span class="line">属性:最小值</span><br><span class="line"></span><br><span class="line">状态计算</span><br><span class="line">集合划分:</span><br><span class="line">根据最后一次操作的不同划分</span><br><span class="line">情况1:删除,将A[i]删除后A变成B,意味A前i-1和B前j完成操作，dp(i-1,j)+1</span><br><span class="line">情况2:插入,插入B[j]到A末尾后后A变成B，意味着A前i和B前j-1完成操作，dp(i,j-1)+1</span><br><span class="line">情况3:替换,将A[i]替换成B[j],意味着A前i-1和B前j-1完成操作，dp(i-1,j-1)+A[i]==B[j],注意还要看A[i]是否等于B[j]</span><br><span class="line"></span><br><span class="line">状态转移:</span><br><span class="line">三种情况取最小值</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1010</span>;</span><br><span class="line"><span class="type">char</span> A[SIZE];</span><br><span class="line"><span class="type">char</span> B[SIZE];</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,M;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    cin&gt;&gt;A+<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;M;</span><br><span class="line">    cin&gt;&gt;B+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=i;<span class="comment">//B无字符时A只能删除</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=M;j++)&#123;</span><br><span class="line">        dp[<span class="number">0</span>][j]=j;<span class="comment">//A无字符时A只能插入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;j++)&#123;</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j]+<span class="number">1</span>,dp[i][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>-(A[i]==B[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[N][M];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/901/">899. 编辑距离 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">只是求多次最短编辑距离</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1010</span>;</span><br><span class="line"><span class="type">char</span> A[SIZE][SIZE];</span><br><span class="line"><span class="type">char</span> B[SIZE];</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowestDistance</span><span class="params">(<span class="type">char</span>* A,<span class="type">char</span>* B)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> lA = <span class="built_in">strlen</span>(A+<span class="number">1</span>),lB=<span class="built_in">strlen</span>(B+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=lA;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=lB;i++)&#123;</span><br><span class="line">        dp[<span class="number">0</span>][i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lA;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=lB;j++)&#123;</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j]+<span class="number">1</span>,dp[i][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>-(A[i]==B[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[lA][lB];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;A[i]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> bound;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;B+<span class="number">1</span>;</span><br><span class="line">        cin&gt;&gt;bound;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="type">int</span> num = <span class="built_in">lowestDistance</span>(A[j],B);</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=bound)cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h1><p>所谓<strong>区间dp</strong>，指在一段区间上进行动态规划，一般做法是由长度较小的区间往长度较大的区间进行递推，最终得到整个区间的答案，而边界就是长度为1以及2的区间。</p>
<h2 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/284/">282. 石子合并 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态表示:dp(i,j)</span><br><span class="line">集合:将第i堆到第j堆石子合并的顺序</span><br><span class="line">属性:合并的最小代价</span><br><span class="line"></span><br><span class="line">状态计算</span><br><span class="line">集合划分:根据最后一次石子合并的顺序划分</span><br><span class="line">i-j一共 j-i+1堆</span><br><span class="line">最后一次合并可以是[i,k]和[k+1,j]合并,其中k取i到j-1，代价为dp(i,k)+dp(k+1,j)+cost(i,j)</span><br><span class="line">状态转移:取最小</span><br><span class="line">for(int k=i;k&lt;j;k++)</span><br><span class="line"> dp(i,j)=min(dp(i,j),dp(i,k)+dp(k+1,j)+cost(i,j))</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE=<span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> num[SIZE];</span><br><span class="line"><span class="type">int</span> preCost[SIZE];</span><br><span class="line"><span class="type">int</span> dp[SIZE][SIZE];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        preCost[i]=num[i]+preCost[i<span class="number">-1</span>];  <span class="comment">//使用前缀数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">1</span>;len&lt;N;len++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N-len;i++)&#123;</span><br><span class="line">            <span class="type">int</span> j=i+len;</span><br><span class="line">            dp[i][j]=dp[i][i]+dp[i+<span class="number">1</span>][j]+preCost[j]-preCost[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;k++)&#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i][k]+dp[k+<span class="number">1</span>][j]+preCost[j]-preCost[i<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[<span class="number">1</span>][N];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="状态压缩DP"><a href="#状态压缩DP" class="headerlink" title="状态压缩DP"></a>状态压缩DP</h1><h2 id="蒙德里安的梦想"><a href="#蒙德里安的梦想" class="headerlink" title="蒙德里安的梦想"></a>蒙德里安的梦想</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/293/">291. 蒙德里安的梦想 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态压缩其实就是将一组状态压缩成一个整数的二进制表示</span><br><span class="line"></span><br><span class="line">首先这里只需考虑横方块的放置方案数，因为横方块只要合法放置，那么竖放块将剩下的填充即可</span><br><span class="line">状态表示:dp(i,j)</span><br><span class="line">集合:对于横向方块,前i-1列已经放好,第i列的放置的状态为j(放置的意思是方块放置的起点为当前列)</span><br><span class="line">属性:方案数之和</span><br><span class="line"></span><br><span class="line">状态计算</span><br><span class="line">集合划分:根据第i列的状态不同划分</span><br><span class="line">对于第i列来讲,有N行,理论上有2^N种不同状态,如下</span><br><span class="line">dp(i,00...00),dp(i,00...01),...,dp(i,11...11)</span><br><span class="line"></span><br><span class="line">状态转移</span><br><span class="line">对于第i列的每一种状态,并不完全合法，不能直接计算,需要满足以下条件</span><br><span class="line">1.当前列状态自身必须合法,连续的0必须是偶数，以便放置竖方块</span><br><span class="line">2.前一列延展到当前列的方块和当前列放置方块不能有重合,也就是如果前一列对应行放了,当前列对应行就不能再放</span><br><span class="line">  这样第i列的状态其实由第i-1列决定,也就是某个状态可能对应前一列多种状态,可由前一列的状态转移而来</span><br><span class="line">用vector&lt;int&gt; transfer[1&lt;&lt;12] 存储当前列对应的前一列的合法状态,index:当前列状态 value:前一列状态</span><br><span class="line">则转移方程为:dp(i,j)=dp(i-1,k1)+dp(i-1,k2)+...+dp(i-1,kn)</span><br><span class="line">k1,k2,...,kn为状态j对应的前一列合法状态</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">12</span>][<span class="number">1</span>&lt;&lt;<span class="number">12</span>];<span class="comment">//状态表示dp[i][j],前i-1列方块已放好(横向方块放置起点列号小于等于i-1),且第i列的状态为j(第i列如何放置横向方块到第i+1列)的所有方案数</span></span><br><span class="line">                  <span class="comment">//注意这里的状态j是二进制表示,第几位是1代表当前列第几行放了方块</span></span><br><span class="line"><span class="comment">//以下为预处理部分,这样不必枚举dp每列状态时都穷举前一列所有状态</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; transfer[<span class="number">1</span>&lt;&lt;<span class="number">12</span>];<span class="comment">//transfer[j],列状态为j,可由前一列的哪些状态转移而来</span></span><br><span class="line"><span class="type">bool</span> isConstEven[<span class="number">1</span>&lt;&lt;<span class="number">12</span>];<span class="comment">//isisConstEven[j],列状态为j时是否有合法,是否有连续个偶数0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,M;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;N&gt;&gt;M,N&amp;&amp;M)&#123;<span class="comment">//逗号表达式,处理多组用例,遇到0 0截止</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;N;j++)&#123;<span class="comment">//转移条件1:对于列状态j,计算哪些是有连续个偶数0</span></span><br><span class="line">            isConstEven[j]=<span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;<span class="comment">//状态j二进制表示0的连续个数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">0</span>;s&lt;N;s++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!(j&gt;&gt;s&amp;<span class="number">1</span>))&#123;<span class="comment">//状态j从后往前第s位是0,计数+1</span></span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//遇到1</span></span><br><span class="line">                    <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>)&#123;<span class="comment">//判断连续的0是否是偶数个,不是不合法,枚举下一个状态</span></span><br><span class="line">                        isConstEven[j]=<span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cnt = <span class="number">0</span>;<span class="comment">//是的话重置,当然也可以不重置,偶数+偶数还是偶数</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>)isConstEven[j]=<span class="literal">false</span>;<span class="comment">//状态j的第一位(倒数最后一位)可能是0,缺少终止判断,加上</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;N;j++)&#123;<span class="comment">//转移条件2:对于当前列状态j,摆好后不能使得当前列重叠</span></span><br><span class="line">            transfer[j].<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">1</span>&lt;&lt;N;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(isConstEven[j|k]&amp;&amp;!(j&amp;k))&#123;<span class="comment">//两个转移条件都要满足</span></span><br><span class="line">                    transfer[j].<span class="built_in">push_back</span>(k); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">         dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//第0列不存在,不能放方块，方案数为1</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;N;j++)&#123;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">auto</span> k : transfer[j])&#123;</span><br><span class="line">                     dp[i][j] += dp[i<span class="number">-1</span>][k];</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         cout&lt;&lt;dp[M][<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a>最短Hamilton路径</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/93/">91. 最短Hamilton路径 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态表示:dp(i,j)</span><br><span class="line">集合:经过的点是i(二进制表示),目的地是j(j在i中)的路径</span><br><span class="line">属性:最短路径</span><br><span class="line"></span><br><span class="line">状态计算</span><br><span class="line">集合划分:根据倒数第二个点的不同划分,假设倒数第二个点是k</span><br><span class="line">则看能否先从起点到达k,再由k到达终点使得路径更短</span><br><span class="line"></span><br><span class="line">状态转移:取最小</span><br><span class="line">dp(i,j)=min(dp(i,j),dp(i-(1&lt;&lt;j),k)+weight(k,j))</span><br><span class="line">需要注意,这里k遍历所有点同时需要满足k在i除去j的集合中</span><br><span class="line"></span><br><span class="line">有点类似图的最短路径,但是具体过程是不一样的</span><br><span class="line">这里是从小到大对于每一个经过的点集合,枚举集合里每一个目的地j,枚举集合中 倒数第二个点k,是否能缩短距离到j的距离,需要保证每个点都当且仅当经过一次,每个集合都是最优</span><br><span class="line"></span><br><span class="line">初始化:dp(1,0)=0 起点为0号点,其他状态都是无穷大</span><br><span class="line">答案:dp((1&lt;&lt;n)-1,n-1)</span><br><span class="line"></span><br><span class="line">tips:这里集合保证每个点都会经过,除了dp(1,0)其他没有更新过的集合都是无穷大</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1</span>&lt;&lt;N][N];<span class="comment">//状态表示dp[i][j],经过的点是i(二进制表示),目的地是j的所有路径(j在i中) 最小距离</span></span><br><span class="line"><span class="type">int</span> weight[N][N];<span class="comment">//所有点之间两两之间的距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            cin&gt;&gt;weight[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dp);<span class="comment">//初始设置成无穷大</span></span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">//从0号点出发,因此经过0号点到0号点距离是0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i++)&#123;<span class="comment">//对于每一个经过的点集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;<span class="comment">//当以j为目的地时</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)&#123;<span class="comment">//j需要在i中</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;<span class="comment">//枚举倒数第二个点,是否能缩短距离</span></span><br><span class="line">                    <span class="keyword">if</span>(i-(<span class="number">1</span>&lt;&lt;j)&gt;&gt;k&amp;<span class="number">1</span>)&#123;<span class="comment">//k也需要在除去j的i中</span></span><br><span class="line">                        dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i-(<span class="number">1</span>&lt;&lt;j)][k]+weight[k][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h1><h2 id="没有上司的舞会"><a href="#没有上司的舞会" class="headerlink" title="没有上司的舞会"></a>没有上司的舞会</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/287/">285. 没有上司的舞会 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态表示:dp(i,0)和dp(i,1)</span><br><span class="line">集合:以i为节点,i去或不去</span><br><span class="line">属性:最大快乐值</span><br><span class="line"></span><br><span class="line">状态计算</span><br><span class="line">集合划分+状态转移</span><br><span class="line">根据i去不去划分</span><br><span class="line">i去,子节点不去的最大值相加,dp(i,1)=dp(i_sub1,0)+dp(i_sub2,0)+...dp(i_subn,0)+happy(i)</span><br><span class="line">i不去，子节点可去可不去</span><br><span class="line">dp(i,0)=max(dp(i_sub1,0),dp(i_sub1,1))+...+max(dp(i_subn,0),dp(i_subn,1))</span><br><span class="line"></span><br><span class="line">答案:max(dp(0,1),dp(0,0))</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> happy[N]; <span class="comment">//每个职工的高兴度</span></span><br><span class="line"><span class="type">int</span> f[N][<span class="number">2</span>]; <span class="comment">//上面有解释哦~</span></span><br><span class="line"><span class="type">int</span> e[N],ne[N],h[N],idx; <span class="comment">//链表，用来模拟建一个树</span></span><br><span class="line"><span class="type">bool</span> has_father[N]; <span class="comment">//判断当前节点是否有父节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123; <span class="comment">//把a插入树中</span></span><br><span class="line">    e[idx] = b,ne[idx] = h[a],h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123; <span class="comment">//开始求解题目</span></span><br><span class="line">    f[u][<span class="number">1</span>] = happy[u]; <span class="comment">//如果选当前节点u，就可以把f[u,1]先怼上他的高兴度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])&#123; <span class="comment">//遍历树</span></span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j); <span class="comment">//回溯</span></span><br><span class="line">        <span class="comment">//状态转移部分，上面有详细讲解~</span></span><br><span class="line">        f[u][<span class="number">0</span>] += <span class="built_in">max</span>(f[j][<span class="number">1</span>],f[j][<span class="number">0</span>]);</span><br><span class="line">        f[u][<span class="number">1</span>] += f[j][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;happy[i]); <span class="comment">//输入每个人的高兴度</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h); <span class="comment">//把h都赋值为-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b; <span class="comment">//对应题目中的L,K,表示b是a的上司</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b); <span class="comment">//输入~</span></span><br><span class="line">        has_father[a] = <span class="literal">true</span>; <span class="comment">//说明a他有爸爸（划掉）上司</span></span><br><span class="line">        <span class="built_in">add</span>(b,a); <span class="comment">//把a加入到b的后面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root = <span class="number">1</span>; <span class="comment">//用来找根节点</span></span><br><span class="line">    <span class="keyword">while</span>(has_father[root]) root ++; <span class="comment">//找根节点</span></span><br><span class="line">    <span class="built_in">dfs</span>(root); <span class="comment">//从根节点开始搜索</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">max</span>(f[root][<span class="number">0</span>],f[root][<span class="number">1</span>])); <span class="comment">//输出不选根节点与选根节点的最大值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计数类DP"><a href="#计数类DP" class="headerlink" title="计数类DP"></a>计数类DP</h1><h2 id="整数划分"><a href="#整数划分" class="headerlink" title="整数划分"></a>整数划分</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/902/">900. 整数划分 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态表示:dp(i,j)</span><br><span class="line">集合:</span><br><span class="line">类比完全背包:从前i个物品中选,体积不超过j，每种物品可以取无限个</span><br><span class="line">		   从前i个整数(1~i)选,和恰好是j,每个数可以取无限个</span><br><span class="line">属性:方案数之和</span><br><span class="line"></span><br><span class="line">状态计算</span><br><span class="line">集合划分:根据第i个数选几个划分</span><br><span class="line">选0个:dp(i-1,j)</span><br><span class="line">选1个:dp(i-1,j-i)</span><br><span class="line">选2个:dp(i-1,j-2*i)</span><br><span class="line">...</span><br><span class="line">选k个:dp(i-1,j-k*i)</span><br><span class="line"></span><br><span class="line">状态转移:求和</span><br><span class="line">dp(i,j)=dp(i-1,j)+dp(i-1,j-i)+dp(i-2,j-2*i)+...+dp(i-k,j-k*i)</span><br><span class="line">化简:</span><br><span class="line">dp(i,j-i)=        dp(i-1,j-i)+dp(i-2,j-2*i)+...+dp(i-k,j-k*i)</span><br><span class="line"></span><br><span class="line">dp(i,j)=dp(i-1,j)+dp(i,j-i)</span><br><span class="line"></span><br><span class="line">初始化:dp(i,0)=1  前i个数中选,和为0,只有全不选1种</span><br><span class="line">答案：dp(n,n)</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j++)&#123;  <span class="comment">//j从小到大枚举,优化到一维</span></span><br><span class="line">            dp[j] += dp[j-i];</span><br><span class="line">            dp[j] %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="数位统计DP"><a href="#数位统计DP" class="headerlink" title="数位统计DP"></a>数位统计DP</h1><h2 id="计数问题"><a href="#计数问题" class="headerlink" title="计数问题"></a>计数问题</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/340/">338. 计数问题 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先为了方便，统计[a,b]数字j出现的次数,可以使用前缀统计[1,b]数字j出现的次数,[1,b]-[1,a-1]就是答案</span><br><span class="line">对于[1,b],要求数字j出现的次数</span><br><span class="line"></span><br><span class="line">根据j出现的倒数位数i划分,对于数字j,枚举i从1到b最高位</span><br><span class="line">假设j出现在第i位,[1,b]满足条件数形式必为:left      j   right,</span><br><span class="line">						     b表示为:b_left  b_i  b_right</span><br><span class="line">1.0&lt;=left&lt;b_left:第i位可取j,第0~i-1位任取，b_left*10^(i-1)</span><br><span class="line">2.left==b_left</span><br><span class="line">	2.1 j&lt;b_i:j比b的第i位小,第i位可取j,共10^(i-1)</span><br><span class="line">	2.2 j==b_i:j比b的第i位小,第i位可取j，但后几位必须小于b_right,共b_right+1</span><br><span class="line">	2.3 j&gt;b_i,j比b的第i位大,第i位不可取j,共0种</span><br><span class="line">共b_left*10^(i-1)+10^(i-1)/b_right+1/0</span><br><span class="line"></span><br><span class="line">但是需要注意j为0的情况,j为0那么前面的数不能为0,同时j不能出现在最高位,也就是讨论如下：</span><br><span class="line">1.0&lt;left&lt;b_left:第i位可取j,第0~i-1位任取，(b_left-1)*10^(i-1)</span><br><span class="line">2.left==b_left</span><br><span class="line">	2.1 j&lt;b_i:j比b的第i位小,第i位可取j,共10^(i-1)</span><br><span class="line">	2.2 j==b_i:j和b的第i位想等,第i位可取j，但后几位必须小于b_right,共b_right+1</span><br><span class="line">	2.3 j&gt;b_i,j比b的第i位大,第i位不可取j,共0种</span><br><span class="line">(b_left-1)*10^(i-1)+10^(i-1)/b_right,共b_right+1/0</span><br><span class="line">综合相比j!=0情况直接减去一个10^(i-1)</span><br><span class="line"></span><br><span class="line">答案:对于j,累加i就是数字j出现的次数</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">digit</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">        ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLeft</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRight</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> shift = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(--i)&#123;</span><br><span class="line">        shift*=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n%shift;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">num</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(--i)&#123;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> j)</span></span>&#123;  <span class="comment">//返回[1,n]当中j出现的次数</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dig = <span class="built_in">digit</span>(n);</span><br><span class="line">    <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=dig;i++)&#123;</span><br><span class="line">            <span class="type">int</span> n_left = <span class="built_in">getLeft</span>(n,i);</span><br><span class="line">            <span class="type">int</span> n_right = <span class="built_in">getRight</span>(n,i);</span><br><span class="line">            ret += n_left*<span class="built_in">pow</span>(<span class="number">10</span>,i<span class="number">-1</span>);</span><br><span class="line">            <span class="type">int</span> n_i = <span class="built_in">num</span>(n,i);</span><br><span class="line">            <span class="keyword">if</span>(j&lt;n_i)ret += <span class="built_in">pow</span>(<span class="number">10</span>,i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==n_i) ret += n_right+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;dig;i++)&#123;  <span class="comment">// 0不能是最高位,并且前面的数不能全是0</span></span><br><span class="line">        <span class="type">int</span> n_left = <span class="built_in">getLeft</span>(n,i);</span><br><span class="line">        <span class="type">int</span> n_right = <span class="built_in">getRight</span>(n,i);</span><br><span class="line">        ret += (n_left<span class="number">-1</span>)*<span class="built_in">pow</span>(<span class="number">10</span>,i<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> n_i = <span class="built_in">num</span>(n,i);</span><br><span class="line">        <span class="keyword">if</span>(j&lt;n_i)ret += <span class="built_in">pow</span>(<span class="number">10</span>,i<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j==n_i) ret += n_right+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;a&gt;&gt;b,a||b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b)<span class="built_in">swap</span>(a,b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)cout&lt;&lt;<span class="built_in">count</span>(b,j)-<span class="built_in">count</span>(a<span class="number">-1</span>,j)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>简化</strong></p>
<p>算n_left和n_right可以更快，并且可以将0和其他情况合并</p>
<p>j&#x3D;0,考虑到高位不能是0,直接减去1个pow(10,i-1)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">digit</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">        ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> j)</span></span>&#123;  <span class="comment">//返回[1,n]当中j出现的次数</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dig = <span class="built_in">digit</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=dig;i++)&#123;  </span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">pow</span>(<span class="number">10</span>,i<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> n_left = n/t/<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> n_right = n%t;</span><br><span class="line">        <span class="type">int</span> n_i = n/t%<span class="number">10</span>;</span><br><span class="line">        ret += n_left*<span class="built_in">pow</span>(<span class="number">10</span>,i<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>) ret -= <span class="built_in">pow</span>(<span class="number">10</span>,i<span class="number">-1</span>);<span class="comment">//j=0时高位不能是0,减去1个</span></span><br><span class="line">        <span class="keyword">if</span>(j&lt;n_i)ret += <span class="built_in">pow</span>(<span class="number">10</span>,i<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(j==n_i)ret += n_right+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;a&gt;&gt;b,a||b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b)<span class="built_in">swap</span>(a,b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)cout&lt;&lt;<span class="built_in">count</span>(b,j)-<span class="built_in">count</span>(a<span class="number">-1</span>,j)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h1><h2 id="滑雪"><a href="#滑雪" class="headerlink" title="滑雪"></a>滑雪</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/903/">901. 滑雪 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态表示:dp(i,j)</span><br><span class="line">集合:从第i行第j列开始的滑雪路径</span><br><span class="line">属性:最长滑雪轨迹</span><br><span class="line"></span><br><span class="line">状态计算</span><br><span class="line">集合划分:根据第一步的方向不同计算</span><br><span class="line">上:dp(i+1,j)</span><br><span class="line">下:dp(i-1,j)</span><br><span class="line">左:dp(i,j-1)</span><br><span class="line">右:dp(i,j+1)</span><br><span class="line"></span><br><span class="line">状态转移:求最大</span><br><span class="line">dp(i,j)=max(dp(i-1,j),dp(i+1,j),dp(i,j-1),dp(i,j+1))+1,当然这里需要满足num(i,j)&gt;num[,],也就是可以滑</span><br><span class="line"></span><br><span class="line">为了方便这里实际上是用递归实现</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> R, C;</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="type">int</span> num[N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getDp</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i][j]!=<span class="number">-1</span>)<span class="keyword">return</span> dp[i][j]; <span class="comment">//如果已经计算过，直接返回答案，防止死循环</span></span><br><span class="line">    dp[i][j]=<span class="number">1</span>;  <span class="comment">//当前区域最小也是1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i][j]&gt;num[i+dx[k]][j+dy[k]]&amp;&amp;i+dx[k]&gt;=<span class="number">1</span>&amp;&amp;i+dx[k]&lt;=R&amp;&amp;j+dy[k]&gt;=<span class="number">1</span>&amp;&amp;j+dy[k]&lt;=C)&#123;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i][j],<span class="built_in">getDp</span>(i+dx[k],j+dy[k])+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;R&gt;&gt;C;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=R;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=C;j++)&#123;</span><br><span class="line">            cin&gt;&gt;num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=R;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=C;j++)&#123;</span><br><span class="line">            length = <span class="built_in">max</span>(length,<span class="built_in">getDp</span>(i,j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;length;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心问题</title>
    <url>/posts/2581734894.html</url>
    <content><![CDATA[<h1 id="贪心分析"><a href="#贪心分析" class="headerlink" title="贪心分析"></a>贪心分析</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心策略一般是直觉</span><br><span class="line"></span><br><span class="line">贪心证明有两种</span><br><span class="line">一种是数学归纳法，对贪心算法步骤或者输入规模归纳，归纳过程中证明最优性</span><br><span class="line">另一种是替换，设法将最优解替换成算法解，并且替换过程中保持最优性</span><br></pre></td></tr></table></figure>

<h1 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h1><h2 id="区间选点"><a href="#区间选点" class="headerlink" title="区间选点"></a>区间选点</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/907/">905. 区间选点 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心策略</span><br><span class="line">1.将每个区间按照右端点排序</span><br><span class="line">2.从前到后枚举每个区间,如果当前区间已经有点,跳过;否则选择区间右端点</span><br><span class="line">3.输出总共选择的点</span><br><span class="line"></span><br><span class="line">贪心证明</span><br><span class="line">直觉上是既然每个区间必须有点，那就选右端点，使每个点尽可能地覆盖更多的区间</span><br><span class="line">但也可以简要证明</span><br><span class="line">首先这种贪心是一种合法方案,同时假设最终最少的点是min,贪心求出来的是ret</span><br><span class="line">首先min是最少的,min&lt;=ret</span><br><span class="line">接下来只需证明min&gt;=ret</span><br><span class="line">根据贪心策略,问题等价于我们只考虑从前往后哪些没有跳过的区间(跳过的区间对于点的选择没有贡献)，它们彼此没有交集,这些区间也是ret个,要使得这些区间至少包含一个点,显然至少需要ret个点,而原始区间多于ret个,因此需要的点只可能相等或更多,因此min&gt;=ret</span><br><span class="line">综上min==ret,贪心策略正确</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Range &amp;g)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r&lt;g.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,l,r;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        range[i]=&#123;l,r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>,end = <span class="number">-2e9</span>;<span class="comment">//end存储上一个选择的点</span></span><br><span class="line">    <span class="built_in">sort</span>(range,range+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(range[i].l&gt;end)&#123;<span class="comment">//如果当前区间没有点,选择右端点</span></span><br><span class="line">            ret++;</span><br><span class="line">            end=range[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ret;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最大不相交区间数量"><a href="#最大不相交区间数量" class="headerlink" title="最大不相交区间数量"></a>最大不相交区间数量</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/910/">908. 最大不相交区间数量 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心策略</span><br><span class="line">1.将每个区间按照右端点排序</span><br><span class="line">2.从前到后枚举每个区间,如果选择当前区间会存在相交情况,跳过;否则选择当前区间</span><br><span class="line">3.输出总共选择的区间数</span><br><span class="line"></span><br><span class="line">贪心证明</span><br><span class="line">直觉上是使选择的区间尽可能对后面的区间选择没有影响</span><br><span class="line">但也可以简要证明</span><br><span class="line">首先这种贪心是一种合法方案,同时假设最终最大的区间数量是max,贪心求出来的是ret,max&gt;=ret</span><br><span class="line">接下来只需证明max&lt;=ret</span><br><span class="line">同样问题等价于我们只考虑从前往后哪些没有跳过的区间(跳过的区间对于区间数没有贡献),这些区间两两互不相交，数量为ret个，而跳过的区间至少会和这些区间当中一个相交,因此能选择出来的区间只会相等或者更少，因此max&lt;=ret</span><br><span class="line">综上max==ret，贪心策略正确</span><br><span class="line"></span><br><span class="line">这里其实和区间选点问题代码一样,可以看成一个点对应一个区间,只不过区间选点求的是下界,这里求的是上界</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Range &amp;g)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r&lt;g.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,l,r;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        range[i]=&#123;l,r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>,end = <span class="number">-2e9</span>;<span class="comment">//end存储上一个选择的区间的右端点</span></span><br><span class="line">    <span class="built_in">sort</span>(range,range+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(range[i].l&gt;end)&#123;<span class="comment">//如果选择当前区间不会存在相交,选择,并更新右端点</span></span><br><span class="line">            ret++;</span><br><span class="line">            end=range[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ret;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区间分组"><a href="#区间分组" class="headerlink" title="区间分组"></a>区间分组</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/908/">906. 区间分组 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法1:</span><br><span class="line">可以类比给课程安排教室，每个课程的开始时间和结束时间分别是Si和Fi，每个时间段一个教室只能安排一个课程，问安排所有课程最少需要几个教室</span><br><span class="line">先按照时间先后排序</span><br><span class="line">遇到课程开始时间就教室+1，遇到结束时间教室-1，中间最大的教师数就是最少需要的教室</span><br><span class="line"></span><br><span class="line">方法2：贪心</span><br><span class="line">贪心策略：</span><br><span class="line">1.将区间按照左端点排序</span><br><span class="line">2.从前往后枚举每一个区间，如果当前区间和已存在的某个分组没有交集，就加入该分组，否则自成一个分组</span><br><span class="line">3.输出分组数量</span><br><span class="line"></span><br><span class="line">贪心证明：</span><br><span class="line">比较当前区间是否和某个组有交集是根据当前区间的左端点和所有组的最大区间右端点</span><br><span class="line">证明类似最大不相交区间数量,只不过为什么按左端点排序是个问题</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> point[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a,b;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        point[<span class="number">2</span>*i]=<span class="number">2</span>*a; <span class="comment">//标记区间左端点为偶数</span></span><br><span class="line">        point[<span class="number">2</span>*i+<span class="number">1</span>]=<span class="number">2</span>*b+<span class="number">1</span>;<span class="comment">//标记区间有端点为奇数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(point,point+<span class="number">2</span>*n);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>*n; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>(point[i]%<span class="number">2</span>==<span class="number">0</span>)count++; <span class="comment">//遇到左端点就加1</span></span><br><span class="line">        <span class="keyword">else</span> count--; <span class="comment">//遇到右端点就少1</span></span><br><span class="line">        ret = <span class="built_in">max</span>(ret,count);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ret&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Range&amp;r)&#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;r.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;range[i].l&gt;&gt;range[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(range,range+n);</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; minHeap;<span class="comment">//使用小根堆优化,存储各分组最大区间右端点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        Range r = range[i];</span><br><span class="line">        <span class="keyword">if</span>(minHeap.<span class="built_in">empty</span>()||minHeap.<span class="built_in">top</span>()&gt;=r.l)minHeap.<span class="built_in">push</span>(r.r);<span class="comment">//自成一分组</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            minHeap.<span class="built_in">pop</span>();</span><br><span class="line">            minHeap.<span class="built_in">push</span>(r.r);<span class="comment">//更新最大区间右端点</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;minHeap.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区间覆盖"><a href="#区间覆盖" class="headerlink" title="区间覆盖"></a>区间覆盖</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/909/">907. 区间覆盖 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心策略</span><br><span class="line">1.将所有区间按照左端点排序，设置end等于目标区间的左端点</span><br><span class="line">2.从前往后枚举所有区间，选择能够覆盖end的右端点最大的区间,更新end</span><br><span class="line">3.继续重复进行第2步，如果最终end小于目标区间右端点说明无法覆盖；否则可以覆盖</span><br><span class="line"></span><br><span class="line">贪心证明</span><br><span class="line">从前往后可以逐个将区间的最优解替换成算法解，并且保持最优性</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Range&amp;r)&#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;r.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,n;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;range[i].l&gt;&gt;range[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(range,range+n);</span><br><span class="line">    <span class="type">int</span> end = a,ret=<span class="number">0</span>;<span class="comment">//end为要覆盖的目标端点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j = i,r=<span class="number">-2e9</span>;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;n&amp;&amp;range[j].l&lt;=end;j++)&#123;  <span class="comment">//寻找能覆盖端点的最大区间右端点</span></span><br><span class="line">            r = <span class="built_in">max</span>(r,range[j].r);</span><br><span class="line">        &#125;</span><br><span class="line">        ret++;</span><br><span class="line">        end = r;</span><br><span class="line">        <span class="keyword">if</span>(end&lt;a)&#123;   <span class="comment">//找不到能覆盖的区间，输出-1</span></span><br><span class="line">            cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(end&gt;=b)<span class="keyword">break</span>; <span class="comment">//如果完成目标能覆盖右端点,退出</span></span><br><span class="line">        i=j<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(end&lt;b)cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;<span class="comment">//整个循环退出依然无法完成目标，输出-1</span></span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;ret&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树</h1><h2 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/150/">148. 合并果子 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心策略</span><br><span class="line">每次选择两个权值最小的果子合并，新果子的体力消耗是合并的果子体力消耗之和，直到果子只有一堆时输出</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt;minHeap;<span class="comment">//使用小根堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        minHeap.<span class="built_in">push</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(minHeap.<span class="built_in">size</span>()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> a = minHeap.<span class="built_in">top</span>();<span class="comment">//每次取出两个最小体力消耗果子合并</span></span><br><span class="line">        minHeap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> b = minHeap.<span class="built_in">top</span>();</span><br><span class="line">        minHeap.<span class="built_in">pop</span>();</span><br><span class="line">        minHeap.<span class="built_in">push</span>(a+b);</span><br><span class="line">        ret += a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ret;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="排序不等式"><a href="#排序不等式" class="headerlink" title="排序不等式"></a>排序不等式</h1><h2 id="排队打水"><a href="#排队打水" class="headerlink" title="排队打水"></a>排队打水</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/description/915/">913. 排队打水 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心策略</span><br><span class="line">将每个人打水的时间从小到大排序，打水顺序就是该顺序</span><br><span class="line"></span><br><span class="line">贪心证明</span><br><span class="line">假设最优解的打水顺序不是按照打水时间从小到大顺序，那么必定存在两个相邻的逆序对(否则两两顺序整个就顺序)，交换这两个打水顺序能使总时间更小</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(num,num+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        ret += num[i]*(n-i<span class="number">-1</span>);<span class="comment">//每个打水时间的权重是后面的人数之和</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ret&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="绝对值不等式"><a href="#绝对值不等式" class="headerlink" title="绝对值不等式"></a>绝对值不等式</h1><h2 id="货仓选址"><a href="#货仓选址" class="headerlink" title="货仓选址"></a>货仓选址</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/106/">104. 货仓选址 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心策略</span><br><span class="line">如果n是奇数，选在中位数</span><br><span class="line">如果n是偶数，选在中间两个数之间即可</span><br><span class="line"></span><br><span class="line">证明</span><br><span class="line">利用绝对值不等式|a|+|b|&gt;=|a+b|，当且仅当ab&gt;=0时等号成立</span><br><span class="line">假设选取的点是x，数轴上从小到大共有n个目标点x1,x2,x3,...,xn</span><br><span class="line">距离和为f(x)=|x1-x|+|x2-x|+...+|xn-x|</span><br><span class="line">=(|x-x1|+|xn-x|)+(|x-x2|+|xn-1-x2|)+...</span><br><span class="line">&gt;=xn-x1+xn-1-x2+...</span><br><span class="line">当且仅当x1&lt;=x&lt;=xn,x2&lt;=x&lt;=xn-1,...时等号成立</span><br><span class="line">从而选择中位数作为货仓最好</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;num[i];</span><br><span class="line">    <span class="built_in">sort</span>(num,num+n);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)ret += <span class="built_in">abs</span>(num[i]-num[n/<span class="number">2</span>]);<span class="comment">//选择中位数点</span></span><br><span class="line">    cout&lt;&lt;ret&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="推公式"><a href="#推公式" class="headerlink" title="推公式"></a>推公式</h1><h2 id="耍杂技的牛"><a href="#耍杂技的牛" class="headerlink" title="耍杂技的牛"></a>耍杂技的牛</h2><blockquote>
<p><a href="https://www.acwing.com/problem/content/127/">125. 耍杂技的牛 - AcWing题库</a></p>
</blockquote>
<p><strong>思路分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心策略</span><br><span class="line">从上到下按照重量w和强壮程度s之和排序堆叠</span><br><span class="line"></span><br><span class="line">贪心证明</span><br><span class="line">假设最优解不是按照这种序，则必然存在两头牛w(i),s(i)和w(i+1),s(i+1)  w(i)+s(i)&gt;w(i+1)+s(i+1)</span><br><span class="line">风险分别为w(1)+w(2)+...+w(i-1)-s(i)  和 w(1)+w(2)+...+w(i)-s(i+1)</span><br><span class="line">交换后两头牛分别为w(i+1),s(i+1)和w(i),s(i)</span><br><span class="line">风险分别为 w(1)+w(2)+...+w(i-1)-s(i+1) 和 w(1)+w(2)+...+w(i-1)+w(i+1)-s(i)</span><br><span class="line"></span><br><span class="line">舍去前i-1项</span><br><span class="line">交换前风险分别为 -s(i) 和 w(i)-s(i+1)</span><br><span class="line">交换后风险分别为 -s(i+1) 和 w(i+1)-s(i)</span><br><span class="line">w(i)-s(i+1)&gt;w(i+1)-s(i)</span><br><span class="line">w(i)-s(i+1)&gt;-s(i+1)</span><br><span class="line">因此交换后的最大风险只可能不变或者变xiao</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="type">int</span> w[N],s[N];</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;w[i]&gt;&gt;s[i];</span><br><span class="line">        PII[i]=&#123;w[i]+s[i],s[i]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(PII,PII+n);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret=<span class="number">-2e9</span>,sum=<span class="number">0</span>,t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        t = sum-PII[i].second;</span><br><span class="line">        ret = <span class="built_in">max</span>(ret,t);   <span class="comment">//求最大风险值</span></span><br><span class="line">        sum += PII[i].first-PII[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;ret;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划算法范式与解题套路</title>
    <url>/posts/339018614.html</url>
    <content><![CDATA[<h1 id="算法范式"><a href="#算法范式" class="headerlink" title="算法范式"></a>算法范式</h1><h2 id="从DAG问题说起"><a href="#从DAG问题说起" class="headerlink" title="从DAG问题说起"></a>从DAG问题说起</h2><p>我们来看一个在有向无环图(directed acyclic graphs,DAG)中，寻找从特定源节点出发到其他节点的最短路径问题，如下图所示，尽管解决它已经有很好的算法，但在这里我们从另一个角度看它。</p>
<p>首先将该图线性化，也就是尽可能在一条线上排列，以便所有的边都从左向右延伸，下图为1个例子。</p>
<img src="https://cdn.jsdelivr.net/gh/cslyh/picgostore@main/img/image-20231117174118751.png" alt="image-20231117174118751" style="zoom: 80%;" />

<h2 id="DAG问题的求解"><a href="#DAG问题的求解" class="headerlink" title="DAG问题的求解"></a>DAG问题的求解</h2><p>那DAG和动态规划有什么关系呢？先别急，看看如何解决DAG问题。</p>
<p>对于DAG问题，除了Dijkstra算法和Floyd算法外，我们思考一下还能怎么解决。</p>
<p>比如对于s-d的最短路径，我们可以逆向求，先考虑到它的前驱b或者c的最短路径，也就是：<br>$$<br>dist(s, d) &#x3D; min({dist(s, b) + 1, dist(s, c) + 3})<br>$$<br>一般的算法伪代码如下，V为图的点集，E为边集，复杂度为O(|E|)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Algorithm 2: ShortestPath(V, E)</span><br><span class="line">1: initialize dist(s, v) = ∞ for s ̸= v and dist(s, s) = 0;</span><br><span class="line">2: for v ∈ V \s in linearized order do</span><br><span class="line">3: dist(s, v) = min(u,v)∈E&#123;dist(s, u) + e(u, v)&#125;</span><br><span class="line">4: end</span><br></pre></td></tr></table></figure>

<p>这样，最终我们只需要从起点s出发，从左到右依次计算，并且前一个计算的问题是后一个问题的子问题，有助于计算后一个更大的问题(不同于分治算法子问题独立)，</p>
<h2 id="动态规划的归约"><a href="#动态规划的归约" class="headerlink" title="动态规划的归约"></a>动态规划的归约</h2><p>理解了上述DAG问题的求解后，我们再来看它和动态规划的关系。</p>
<p>实际上动态规划都可以归约到这样一个DAG问题，节点对应动态规划的状态&#x2F;子问题，边对应状态的转移关系，只有先解决前一个状态&#x2F;子问题，才能到达后一个状态&#x2F;子问题，求解动态规划问题的关键在于如何找到这样一个<strong>DAG</strong>结构，只要找到这样一个DAG结构，求解就变得很容易，这是我们对于动态规划应该有的理解。</p>
<h1 id="求解套路"><a href="#求解套路" class="headerlink" title="求解套路"></a>求解套路</h1><p>得出了动态规划的算法范式后，来点实用的，如何解动态规划题呢？</p>
<p>类比DAG，我们知道关键，在于先寻找状态，或者说最优子结构，这里也可以叫集合，以及各状态之间的转移关系，确实每个题目都不一样，但依然有一个大体上的求解套路，学习自AcWing。</p>
<p>我们可以从集合角度看动态规划，思路图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cslyh/picgostore@main/img/image-20230904231847468.png" alt="image-20230904231847468"></p>
<p>其中，状态表示是一个数代表<strong>一个集合</strong>，并且有<strong>一个具体属性</strong>，优化了搜索</p>
<p>状态计算依据一般是寻找<strong>最后一个不同点</strong></p>
<p>算法步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先得出状态表示(一个表达式)，一维/二维/...，这个需要一定经验</span><br><span class="line">集合：状态表示哪个集合</span><br><span class="line">属性：状态表示这个集合具体什么值，最小/最大/和</span><br><span class="line"></span><br><span class="line">然后进行状态计算</span><br><span class="line">集合划分:根据最后一步xxx划分,各个子集分别对应哪个状态(不一定一一对应，一个状态可能包含或者小于某个子集，视问题而定)</span><br><span class="line">状态转移:转移方程是这些状态取最小/最大/求和</span><br><span class="line"></span><br><span class="line">最后按流程求解</span><br><span class="line">初始化:需要设定什么初始值</span><br><span class="line">转移过程:如何编写代码对应状态转移</span><br><span class="line">答案:最终答案是哪个状态或者怎么得到</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
</search>
